<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="RuR-GvR" height="240" scrolling="true" >
    <Require feature="tabs" />
    <Require feature="wave" />
    <Require feature="dynamic-height"/>
  </ModulePrefs>
  <Content type="html">
  <![CDATA[
    <style>
        textarea{
          width:100%; height:300px; }
        #canvas {
          border: 1px solid black;
          width: 500px;
          height: 500px;
        }
    </style>
    <script type="text/javascript">
      var CLOSURE_NO_DEPS = true;
      var CLOSURE_BASE_PATH = "http://gvr.carduner.net/ui/";
    </script>
    <script src="http://gvr.carduner.net/ui/closure/goog/base.js"></script>
    <script src="http://gvr.carduner.net/ui/deps.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.0/jquery.min.js"></script>
    <script type="text/javascript">
goog.require("gvr");
goog.require("gvr.web.client");
goog.require("gvr.world.parser");

var world;
var program;
var renderer;
var runner;
var first_time = true;

var tabs = new gadgets.TabSet(__MODULE_ID__);

function updateExecutionButtons(){
    if (runner !== null && runner.running){
        $("#stop-button").removeAttr("disabled");
        $("#execute-button, #step-button").attr("disabled","disabled");
    } else {
        $("#stop-button").attr("disabled","disabled");
        $("#execute-button, #step-button").removeAttr("disabled");
    }
}

function executeProgram(){
    $("#reload-button").click();
    var lines = $('#program-editor').val().split('\n');
    try{
        var program = gvr.lang.parser.newParser(lines, world.robot).parse();
        var renderer = gvr.newRenderer('canvas', world);
        runner = gvr.newRunner(program, renderer);
        runner.run(
            parseInt($("#speed").val()),
            function(success){
                updateExecutionButtons();
            });
        updateExecutionButtons();
    } catch (e){
        gvr.alert(e.message);
        runner.stop();
        updateExecutionButtons();
    }
}
function reloadWorld(){
    var lines = $("#world-editor").val().split('\n');
    world = gvr.newWorld();
    gvr.world.parser.newParser(lines, world).parse();
    gvr.newRenderer('canvas', world).render();
}

function stopExecution(){
    runner.stop();
    updateExecutionButtons();
}

function stateUpdated(){
    var program = wave.getState().get('program-code')
    if (program){
        $("#program-editor").val(program);
    }
    var world = wave.getState().get('world-code');
    if (world){
        $("#world-editor").val(world);
    }
}

function init() {
    tabs.addTab("World", {
                    contentContainer: document.getElementById("gui_tab"),
                    callback: update_info
                });
    tabs.addTab("Program editor", {
                    contentContainer: document.getElementById("program_editor_tab")
                });

    tabs.addTab("World Editor", {
                    contentContainer: document.getElementById("world_editor_tab")
                });
    tabs.setSelectedTab(0);
    gadgets.window.adjustHeight();

    world = gvr.newWorld();
    program = gvr.lang.parser.newParser(['move','turnoff'], world.robot).parse();
    renderer = gvr.newRenderer('canvas', world);
    renderer.render();

    $("#execute-button").click(executeProgram);

    $("#reload-button").click(reloadWorld);

    $("#stop-button").click(stopExecution);

    if (wave && wave.isInWaveContainer()) {
        wave.setStateCallback(stateUpdated);
    }
}

function update_info(tabId) {
    // this updates the information using the latest program entered by
    // the user and any world information.
    var editor_display = document.getElementById("program_from_editor");
    editor_display.innerHTML = document.getElementById("program-editor").value;

    var world_display = document.getElementById("world_from_editor");
    world_display.innerHTML = document.getElementById("world-editor").value;

    if (first_time){
        first_time = false;
        alert("This alert should be superfluous?!?\n wave is:"+(typeof wave));
    }
    if (wave && wave.isInWaveContainer()){
      wave.getState().submitDelta(
        {
         'program-code':$("#program-editor").val(),
         'world-code':$("#world-editor").val()
        });
    }

    gadgets.window.adjustHeight();
}

// Call init function to initialize and display tabs.
gadgets.util.registerOnLoadHandler(init);
    </script>

    <div id="gui_tab">
      <h2 style="display:none;">Program entered</h2>
      <pre id="program_from_editor" style="display:none;"> </pre>
      <h2 style="display:none;">World defined</h2>
      <pre id="world_from_editor" style="display:none;"> </pre>

      <canvas id="canvas" height="500" width="500"></canvas>
      <input type="button" id="execute-button" value="Execute" />
      <input type="button" id="stop-button" value="Stop" />
      <input type="button" id="reload-button" value="Reload" />
      Speed:
      <select id="speed">
        <option value="200">Slow</option>
        <option value="50">Medium</option>
        <option value="5" selected="selected">Fast</option>
        <option value="-1">Instant</option>
      </select>

    </div>

    <div id="program_editor_tab" style="display:none">
      <h2>Enter program below.</h2>
      <textarea id="program-editor">define face_west:

  while not_facing_west:
    turnleft

define face_east:
  while not_facing_east:
    turnleft

define face_north:
  while not_facing_north:
    turnleft

define face_south:
  while not_facing_south:
    turnleft

define go_to_south_wall:
  face_south
  while front_is_clear:
    move

define go_to_next_bit:
  face_east
  move

define set_carry_bit:
  move
  move
  face_east
  move
  putbeeper
  face_west
  move

define add_bit:
  move
  if next_to_a_beeper:
    set_carry_bit
  else:
    move
    putbeeper

define copy_bit:
  face_north
  if next_to_a_beeper:
    add_bit
  else:
    move
    if next_to_a_beeper:
      move
      putbeeper
  go_to_south_wall

define carry_bit:
  pickbeeper
  face_south
  move
  face_east
  while next_to_a_beeper:
    pickbeeper
    move
  putbeeper
  face_north
  move
  face_east

define main:
  while front_is_clear:
    copy_bit
    face_east
    go_to_next_bit
  face_west
  while front_is_clear:
    move
  face_north
  do 3:
    move
  face_east
  while front_is_clear:
    if not_next_to_a_beeper:
      move
    else:
      carry_bit

main
turnoff</textarea>
    </div>

    <div id="world_editor_tab" style="display:none">
      <h2>Enter world below.</h2>
      <textarea id="world-editor">Robot 1 1 N 8

Wall 8 1 E 4

# the first number (86)
Beepers 1 1 0
Beepers 2 1 1
Beepers 3 1 1
Beepers 4 1 0
Beepers 5 1 1
Beepers 6 1 0
Beepers 7 1 1
Beepers 8 1 0

# the second number (59)
Beepers 1 2 1
Beepers 2 2 1
Beepers 3 2 0
Beepers 4 2 1
Beepers 5 2 1
Beepers 6 2 1
Beepers 7 2 0
Beepers 8 2 0

# the expected result (145)
Beepers 1 5 1
Beepers 2 5 0
Beepers 3 5 0
Beepers 4 5 0
Beepers 5 5 1
Beepers 6 5 0
Beepers 7 5 0
Beepers 8 5 1</textarea>
    </div>

  ]]>
  </Content>
</Module>
