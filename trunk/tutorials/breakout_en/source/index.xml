<index>
  <title> Introduction</title>
  <explain_before>
    <p>Welcome! In this tutorial, which is an expanded version of an
      <a href="http://billmill.org/static/canvastutorial/index.html">
      original tutorial by Bill Mill</a>, we're going to create a breakout
    clone that you can play in your browser, using javascript and 
    the html <code>&lt;canvas&gt;</code> element.  In addition to covering many
    features of the html canvas, we will also see how to incorporate sound and
    saving scores using new features introduced by html5.</p>
    <p>In order to use this tutorial, you'll need to have a relatively recent 
      version of a modern browser; if you are using Internet Explorer, some
      (or all, depending on the version) of the features we will introduce
      may not work.</p>

    <p>Before you read any further, click on the 
    <img src="../images/black_play.png" style="height:64px;"/> 
    button, also known as the "run code" button, 
    on the left to play the game that we'll end up creating.  You may also
    experiment by clicking on the other control buttons that are provided.
    </p>

    <p>On every page, you'll be able to click the "run code" button to run the code
    we've developed so far. Most pages have an editor in it containing
    the javascript code that will be run in the same box as the game as soon as you
    click the button. You can make changes to the code, and see the results
    instantly by clicking the "run code" button. <b>Please note: </b> you can
    change the size of the editor by 1) clicking on the bottom right corner,
    2) letting go of the mouse button (i.e. no click-drag) 3) [you should
    now see an outline of the editor] move the mouse to get the editor the
    size you want, 4) click again.</p>
    <p>In order to make our lives easier, I've included the 
      <a href="http://jquery.com">jQuery</a> framework in every page, which extends
    javascript in your browser with some useful methods.</p>
    <p>If you have any comments or questions, feel free to leave a comment on the
    "comments" tab.</p>
  </explain_before>

  <hidden_code>
    var x = 25;
    var y = 250;
    var dx = 1.5;
    var dy = -4;
    var ctx;
    var WIDTH;
    var HEIGHT;
    var paddlex;
    var paddleh = 10;
    var paddlew = 75;
    var rightDown = false;
    var leftDown = false;
    var canvasMinX = 0;
    var canvasMaxX = 0;
    var intervalId = 0;
    var bricks;
    var NROWS = 5;
    var NCOLS = 5;
    var BRICKWIDTH;
    var BRICKHEIGHT = 15;
    var PADDING = 1;

    var isPlaying = true;
    var background_image = new Image();
    background_image.src = '../images/earth.jpg';

function playBeat(sound_id) {
  if (isPlaying !== false) {

    var tmpAudio;

      tmpAudio = document.getElementById(sound_id);
      if (!tmpAudio.paused) {
        // Pause and reset it
        tmpAudio.pause();
        tmpAudio.currentTime = 0.0;
      }
      tmpAudio.play();
  };
}


    function init() {
      ctx = $('#canvas')[0].getContext("2d");
      WIDTH = $("#canvas").width();
      HEIGHT = $("#canvas").height();
      BRICKWIDTH = (WIDTH/NCOLS) - 1;
      paddlex = WIDTH / 2;
      canvasMinX = $("#canvas").offset().left;
      canvasMaxX = canvasMinX + WIDTH;
      intervalId = setInterval(draw, 10);
      return intervalId;
    }

    function circle(x,y,r) {
      ctx.beginPath();
      ctx.arc(x, y, r, 0, Math.PI*2, true);
      ctx.closePath();
      ctx.fill();
    }

    function rect(x,y,w,h) {
      ctx.beginPath();
      ctx.rect(x,y,w,h);
      ctx.closePath();
      ctx.fill();
    }

    function clear() {
      ctx.clearRect(0, 0, WIDTH, HEIGHT);
      rect(0,0,WIDTH,HEIGHT);
    }

    function onKeyDown(evt) {
      if (evt.keyCode == 39) rightDown = true;
      else if (evt.keyCode == 37) leftDown = true;
    }

    function onKeyUp(evt) {
      if (evt.keyCode == 39) rightDown = false;
      else if (evt.keyCode == 37) leftDown = false;
    }

    $(document).keydown(onKeyDown);
    $(document).keyup(onKeyUp);

    function onMouseMove(evt) {
      if (evt.pageX &gt; canvasMinX &amp;&amp; evt.pageX &lt; canvasMaxX) {
        paddlex = Math.max(evt.pageX - canvasMinX - (paddlew/2), 0);
        paddlex = Math.min(WIDTH - paddlew, paddlex);
      }
    }

    $(document).mousemove(onMouseMove);

    function initbricks() {
        bricks = new Array(NROWS);
        for (i=0; i &lt; NROWS; i++) {
            bricks[i] = new Array(NCOLS);
            for (j=0; j &lt; NCOLS; j++) {
                bricks[i][j] = 1;
            }
        }
    }

    function drawbricks() {
      for (i=0; i &lt; NROWS; i++) {
        ctx.fillStyle = rowcolors[i];
        for (j=0; j &lt; NCOLS; j++) {
          if (bricks[i][j] == 1) {
            rect((j * (BRICKWIDTH + PADDING)) + PADDING, 
                 (i * (BRICKHEIGHT + PADDING)) + PADDING,
                 BRICKWIDTH, BRICKHEIGHT);
          }
        }
      }
    }

    var ballr = 10;
    var rowcolors = ["#FF1C0A", "#FFFD0A", "#00A308", "#0008DB", "#EB0093"];
    var paddlecolor = "#FFFFFF";
    var ballcolor = "#FFFFFF";
    var backcolor = "#000000";

    function draw() {
      ctx.fillStyle = backcolor;
      clear();
      ctx.drawImage(background_image,0,0);
      ctx.fillStyle = ballcolor;
      circle(x, y, ballr);

      if (rightDown) paddlex += 5;
      else if (leftDown) paddlex -= 5;
      ctx.fillStyle = paddlecolor;
      rect(paddlex, HEIGHT-paddleh, paddlew, paddleh);

      drawbricks();

      //want to learn about real collision detection? go read
      // http://www.harveycartel.org/metanet/tutorials/tutorialA.html
      rowheight = BRICKHEIGHT + PADDING;
      colwidth = BRICKWIDTH + PADDING;
      row = Math.floor(y/rowheight);
      col = Math.floor(x/colwidth);
      //reverse the ball and mark the brick as broken
      if (y &lt; NROWS * rowheight &amp;&amp; row &gt;= 0 &amp;&amp; col &gt;= 0 &amp;&amp; bricks[row][col] == 1) {
        dy = -dy;
        bricks[row][col] = 0;
        playBeat("brick_sound");
      }
     
      if (x + dx + ballr &gt; WIDTH || x + dx - ballr &lt; 0) {
        dx = -dx;
        playBeat("wall_sound");
        }
      
      if (y + dy - ballr &lt; 0)
        dy = -dy;
      else if (y + dy + ballr &gt; HEIGHT - paddleh) {
        if (x &gt; paddlex &amp;&amp; x &lt; paddlex + paddlew) {
          //move the ball differently based on where it hit the paddle
          dx = 8 * ((x-(paddlex+paddlew/2))/paddlew);
          dy = -dy;
          playBeat("paddle_sound");
        }
        else if (y + dy + ballr &gt; HEIGHT)
          clearInterval(intervalId);
      }
     
      x += dx;
      y += dy;
    }

    init();
    initbricks();
  </hidden_code>
</index>