collisions.py tests
==================

This file contains the doctest-based tests for collisions.py

We first start by defining some objects that have a position, width and height.

    >>> class rectangle(object):
    ...     def __init__(self, x, y):
    ...         self.x = x
    ...         self.y = y
    ...         self.width = 10
    ...         self.height = 10

Collisions between objects that do not overlap
    >>> import collisions
    >>> obj = rectangle(0, 0)
    >>> other1 = rectangle(20, 0) # to the right of obj, non-overlapping
    >>> print collisions.one_to_one_rectangle(obj, other1)
    False
    >>> print collisions.one_to_one_rectangle(other1, obj)
    False
    >>> other2 = rectangle(0, 20) # higher than obj, non-overlapping
    >>> print collisions.one_to_one_rectangle(obj, other2)
    False
    >>> print collisions.one_to_one_rectangle(other2, obj)
    False

Collision with overlapping objects
    >>> other3 = rectangle(5, 5) # overlapping
    >>> print collisions.one_to_one_rectangle(obj, other3)
    True
    >>> print collisions.one_to_one_rectangle(other3, obj)
    True

Collisions between an object with multiple non-overlapping ones
    >>> print collisions.one_to_many_rectangle(obj, [other1, other2])
    False
    >>> non_overlap = [other1, other2]
    >>> print collisions.one_to_many_rectangle(obj, non_overlap)
    False

Collisions between an object and many, one of which overlap
    >>> overlap = [other1, other2, other3]
    >>> print collisions.one_to_many_rectangle(obj, overlap) #doctest:+ELLIPSIS
    (True, set([<rectangle object at ...>]))
    >>> flag, other = collisions.one_to_many_rectangle(obj, overlap)
    >>> print (other3 in other) and len(other)==1
    True
    
Simply checking to see if a collision has occured between an object
and a collection of others - not caring about which object with
which the collision has taken place.
    >>> print collisions.one_to_many_rectangle_detect(obj, non_overlap)
    False
    >>> print collisions.one_to_many_rectangle_detect(obj, overlap)
    True


Checking to see if an object has gone beyond the world boundary

    >>> world = rectangle(0, 0)
    >>> world.width = 100
    >>> world.height = 100
    >>> print collisions.outside_world(obj, world)
    False
    >>> obj2 = rectangle(5, 5)
    >>> print collisions.outside_world(obj2, world)
    False
    >>> obj3 = rectangle(105, 0)
    >>> print collisions.outside_world(obj3, world)
    True
    >>> obj4 = rectangle(5, 105)
    >>> print collisions.outside_world(obj4, world)
    True
    >>> obj5 = rectangle(5, -105)
    >>> print collisions.outside_world(obj5, world)
    True
    >>> obj6 = rectangle(-15, 30)
    >>> print collisions.outside_world(obj6, world)
    True

Checking to see object overlapping or gone beyond a world boundary

    >>> print collisions.leaving_world(obj, world)
    (False, (False, 0), (False, 0))
    >>> print collisions.leaving_world(obj3, world)
    (True, (True, 15), (False, 0))
    >>> print collisions.leaving_world(obj4, world)
    (True, (False, 0), (True, 15))
    >>> print collisions.leaving_world(obj5, world)
    (True, (False, 0), (True, -105))
    >>> print collisions.leaving_world(obj6, world)
    (True, (True, -15), (False, 0))
    >>> world.x = 10
    >>> world.y = -10
    >>> print collisions.leaving_world(obj5, world)
    (True, (True, -5), (True, -95))
    >>> print collisions.leaving_world(obj6, world)
    (True, (True, -25), (False, 0))

Defining some circles.

    >>> class circle(object):
    ...     def __init__(self, x, y, r):
    ...         self.x = x
    ...         self.y = y
    ...         self.r = r

Next, seeing if they intersect
    >>> circle_1 = circle(0, 0, 10)
    >>> circle_2 = circle(25, 0, 10)
    >>> circle_3 = circle(0, 25, 10)
    >>> circle_4 = circle(15, 0, 20)
    >>> circle_5 = circle(0, 15, 20)
    >>> circle_6 = circle(12, 12, 10)
    >>> print collisions.one_to_one_circle(circle_1, circle_2)
    False
    >>> print collisions.one_to_one_circle(circle_1, circle_2)
    False
    >>> print collisions.one_to_one_circle(circle_1, circle_3)
    False
    >>> print collisions.one_to_one_circle(circle_1, circle_4)
    True
    >>> print collisions.one_to_one_circle(circle_1, circle_5)
    True
    >>> print collisions.one_to_one_circle(circle_1, circle_6)
    True

Collisions between an object and many, two of which overlap; note that the function
returns as soon as a collision is found.
    >>> overlap = [circle_2, circle_3, circle_4, circle_5]
    >>> print collisions.one_to_many_circle(circle_1, overlap) #doctest:+ELLIPSIS
    (True, set([<circle object at ...>]))
    >>> flag, other = collisions.one_to_many_circle(circle_1, overlap)
    >>> print (circle_4 in other) and len(other)==2
    True

Moving on to grids.  We will use a different methods to detect collisions by
1. building a grid of a given resolution
2. determining which grid cells are occupied in parts or entirely by objects
3. looping over each non-empty cells and determining if indeed a collision has
occurred.
This is a rather rough explanation which, hopefully, will get clearer as we
write the (testing) code.

Assume we have a grid of size 12 (slightly bigger than our rectangles), with the grid origin
at (0, 0).  An object located at (0,0) will occupy cell (0,0) only.

    >>> obj = rectangle(0, 0)
    >>> grid = collisions.build_grid([obj], resolution=12)
    >>> print grid #doctest:+ELLIPSIS
    {(0, 0): [<rectangle object at ...>]}

However, if we reduce the grid size to 8, the object will occupy four grid cells

    >>> grid = collisions.build_grid([obj], resolution=8)
    >>> print ((0, 0) in grid) and ((0, 1) in grid) and ((1, 0) in grid) and ((1, 1) in grid)
    True
    >>> print len(grid)
    4

If we use again a resolution of 12, but with an object located at (5, 5), we should again
have the same four cells occupied.

    >>> obj2 = rectangle(5, 5)
    >>> grid = collisions.build_grid([obj2], resolution=12)
    >>> print ((0, 0) in grid) and ((0, 1) in grid) and ((1, 0) in grid) and ((1, 1) in grid)
    True
    >>> print len(grid)
    4

Lets combine both object in a single list.

    >>> grid = collisions.build_grid([obj, obj2], resolution=12)
    >>> print ((0, 0) in grid) and ((0, 1) in grid) and ((1, 0) in grid) and ((1, 1) in grid)
    True
    >>> print len(grid)
    4
    >>> print len(grid[(0, 0)])
    2
    >>> print len(grid[(1, 1)])
    1


